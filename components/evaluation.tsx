'use client'
import { supabase } from "@/utils/supabase"
import { ExamType, UserType } from "@/utils/type"
import { User, UserResponse } from "@supabase/supabase-js"
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/o7ERblxtApa
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { JSX, SVGProps, useCallback, useEffect, useMemo, useState } from "react"

export default function evaluation() {
  const [user, setUser] = useState<UserType>()
  const [teacherExams, setTeacherExams] = useState<ExamType[]>()

  useEffect(() => {
    if (!user) getUserData().then(setUser)
  }, [])
  const userRole = useMemo(() => user?.role, [user])
  const userId = useMemo(() => user?.id, [user])
  useEffect(() => {
    if (userId && !teacherExams && userRole === 'teacher') {
      getTeacherExams(userId).then(data => {
        setTeacherExams(data)
        console.log(data)
      })
    }
  }, [userId])
  const getUserData = useCallback(async (): Promise<UserType | undefined> => {
    const { data: { user }, error: detailError } = await supabase.auth.getUser() || {} as UserResponse
    if (detailError) {
      console.error(detailError)
      return
    }
    const { id: userId } = user ?? {} as User
    const { data: userData, error } = await supabase.from('users').select('*').eq('id', userId).single()
    if (error) {
      console.error(error)
      return
    }
    return userData
  }, [])
  const getTeacherExams = useCallback(async (userId: string): Promise<ExamType[] | undefined> => {
    const { data, error } = await supabase.from('exams').select('*').eq('teacher_id', userId)
    if (error) {
      console.error(error)
      return
    }
    return data
  }, [])
  return (
    <main key="1" className="container mx-auto py-12 px-4 md:px-6">
      <h1 className="text-3xl font-bold mb-8 text-center">Conducted Examinations</h1>
      <div className="space-y-4">
        {teacherExams?.map((exam) => (
          <div key={exam.id} className="flex items-center justify-between bg-white rounded-lg shadow-sm p-4">
            <div className="w-1/2 flex items-center space-x-4">
              <span className="font-medium text-gray-700">1.</span>
              <h3 className="font-medium text-gray-900">{exam.title}</h3>
            </div>
            <Link
              className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
              href={`/studentAppear?code=${exam.code}`}
            >
              <ChevronRightIcon className="w-5 h-5 text-gray-500" />
            </Link>
          </div>
        ))}

      </div>
    </main>
  )
}

function ChevronRightIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m9 18 6-6-6-6" />
    </svg>
  )
}
