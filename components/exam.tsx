'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/0QzM6ihzhyx
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Chivo } from 'next/font/google'
import { Rubik } from 'next/font/google'

chivo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Avatar } from "@/components/ui/avatar"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import { useParams, useSearchParams } from "next/navigation"
import { FormEvent, useCallback, useEffect, useMemo, useState } from "react"
import { supabase } from "@/utils/supabase"
import { toast } from "sonner"
import { QuestionTypeExam, StudentExamLinkType, UserType } from "@/utils/type"
import { User, UserResponse } from "@supabase/supabase-js"

export default function exam() {
  const [user, setUser] = useState<UserType>()
  const params = useSearchParams()
  const code = params.get("code")
  const [questions, setQuestions] = useState<QuestionTypeExam[]>()
  const userRole = useMemo(() => user?.role, [user])
  const userId = useMemo(() => user?.id, [user])
  useEffect(() => {
    if (code) {
      getQuestions(code).then(setQuestions)
    }
  }, [code])
  useEffect(() => {
    if (!user) getUserData().then(setUser)
  }, [])
  const getUserData = useCallback(async (): Promise<UserType | undefined> => {
    const { data: { user }, error: detailError } = await supabase.auth.getUser() || {} as UserResponse
    if (detailError) {
      console.error(detailError)
      return
    }
    const { id: userId } = user ?? {} as User
    const { data: userData, error } = await supabase.from('users').select('*').eq('id', userId).single()
    if (error) {
      console.error(error)
      return
    }
    return userData
  }, [])
  const onSubmit = (e: any) => {
    e.preventDefault()
    if (userRole !== 'student') {
      toast.error('Only students can take the exam')
      return
    }
    const answers = questions?.map(question => ({
      question: question.question,
      question_id: question.id,
      answer: e.target[question.id].value as string,
      marks: 0,
      totalMark: question.marks
    })) || []
    if (answers.length <= 0) {
      toast.error('Please answer atleast one questions')
      return
    }
    if (!userId) {
      toast.error('Please login first')
      return
    }
    if (!code) {
      toast.error('Exam code not found')
      return
    }
    const payload: StudentExamLinkType = {
      student_id: userId,
      exam_code: code,
      answers
    }
    submitAnswers(payload)
  }
  return (
    <div className="mx-auto max-w-4xl px-4 flex flex-col space-y-4">
      <div className="space-y-2 text-center">
        <h1 className="text-3xl font-bold">Examate</h1>
      </div>
      <div className="space-y-2">
        <div className="border-t border-b border-gray-200 dark:border-gray-800">
          <div className="container grid items-center gap-4 px-4 py-4 md:gap-6 md:px-6">
            <div className="flex items-center space-x-4">
              <Avatar className="w-10 h-10" />
              <div className="space-y-1">
                <h2 className="text-xl font-semibold">Exam Title</h2>
                <p className="text-sm font-normal text-gray-500 dark:text-gray-400">Exam Description</p>
              </div>
            </div>
            <div className="space-y-2">
              <h1 className="text-3xl font-bold">Instructions</h1>
              <p className="text-base leading-loose text-gray-500 dark:text-gray-400">
                Instructions will be added here. Instructions will be added here. Instructions will be added here.
                Instructions will be added here. Instructions will be added here. Instructions will be added here.
                Instructions will be added here.
              </p>
            </div>
          </div>
        </div>
        <form className="space-y-4" onSubmit={onSubmit}>
          <div className="border border-gray-200 rounded-lg dark:border-gray-800">
            {questions?.map((question) => (
              <div key={question.id} className="p-4 border-b border-gray-200 last:border-0 dark:border-gray-800">
                <div className="grid items-center gap-4 md:grid-cols-3">
                  <h3 className="text-base font-light ">1. {question.question}</h3>
                  <div className="space-y-2 md:col-start-2 md:col-end-4">
                    <details>
                      <summary className="text-sm font-medium cursor-pointer">Add your answer</summary>
                      <div className="mt-2 space-y-2">
                        <Label className="text-sm font-medium peer-disabled:cursor-not-allowed" htmlFor="question-1">
                          Answer
                        </Label>
                        <Textarea
                          className="min-h-[100px] peer-disabled:pointer-events-none peer-disabled:bg-transparent peer-disabled:opacity-100"
                          id={question.id}
                          placeholder="Enter your answer"
                        />
                      </div>
                    </details>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="flex justify-center">
            <Button size="lg" variant="outline">
              Submit
            </Button>
          </div>
        </form>
      </div>
    </div>
  )
}


async function getQuestions(code: string): Promise<QuestionTypeExam[] | undefined> {
  const { data, error } = await supabase.from('exams').select('questions(question,answer,teacher_id,id,marks)').eq('code', code).single()
  if (error) {
    toast.error(error.message)
    return
  }
  const questions: any = data?.questions
  if (Array.isArray(questions)) {
    return questions as QuestionTypeExam[]
  }
}

async function submitAnswers(data: StudentExamLinkType) {
  const { status, error } = await supabase.from('student_exam_link').upsert(data)
  if (error) toast.error(error.message)
  if (status !== 201) toast.error('Something went wrong')
  if (status === 201) toast.success('Answers submitted successfully')
}

