'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/0QzM6ihzhyx
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Chivo } from 'next/font/google'
import { Rubik } from 'next/font/google'

chivo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Avatar } from '@/components/ui/avatar';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { useParams, useSearchParams } from 'next/navigation';
import { FormEvent, useCallback, useEffect, useMemo, useState } from 'react';
import { supabase } from '@/utils/supabase';
import { toast } from 'sonner';
import {
  ExamType,
  QuestionTypeExam,
  StudentExamLinkType,
  UserType,
} from '@/utils/type';
import { User, UserResponse } from '@supabase/supabase-js';
import Link from 'next/link';

export default function exam() {
  const [user, setUser] = useState<UserType>();
  const params = useSearchParams();
  const code = params.get('code');
  const [exam, setExam] = useState<ExamType>();

  const [questions, setQuestions] = useState<QuestionTypeExam[]>();
  const userRole = useMemo(() => user?.role, [user]);
  const userId = useMemo(() => user?.id, [user]);
  useEffect(() => {
    if (code) {
      getQuestions(code).then(data => {
        if (data && Array.isArray(data)) {
          setQuestions(data[0])
          setExam(data[1])
        }
      });
    }
  }, [code]);
  useEffect(() => {
    if (!user) getUserData().then(setUser);
  }, []);
  const getUserData = useCallback(async (): Promise<UserType | undefined> => {
    const {
      data: { user },
      error: detailError,
    } = (await supabase.auth.getUser()) || ({} as UserResponse);
    if (detailError) {
      console.error(detailError);
      return;
    }
    const { id: userId } = user ?? ({} as User);
    const { data: userData, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    if (error) {
      console.error(error);
      return;
    }
    return userData;
  }, []);
  const onSubmit = (e: any) => {
    e.preventDefault();
    if (userRole !== 'student') {
      toast.error('Only students can take the exam');
      return;
    }
    const answersSet =
      questions?.map((question) => {
        let value: string | undefined = e.target[question.id].value as string
        if (value.trim().length === 0) value = undefined
        return ({
          question: question.question,
          question_id: question.id,
          answer: e.target[question.id].value as string,
          marks: 0,
          totalMark: question.marks,
        })
      }) || [];
    const answers = answersSet.filter((answer) => answer.answer)
    console.log(answers)
    if (answers.length <= 0) {
      toast.error('Please answer atleast one questions');
      return;
    }
    if (!userId) {
      toast.error('Please login first');
      return;
    }
    if (!code) {
      toast.error('Exam code not found');
      return;
    }
    const payload: StudentExamLinkType = {
      student_id: userId,
      exam_code: code,
      answers,
    };
    submitAnswers(payload);
  };
  const calculateTotalMark = () => {
    let total = 0;
    questions?.forEach((question) => {
      const mark = parseInt(
        (document.getElementById(question.id) as HTMLInputElement)
          ?.value || '0',
      );
      total += mark;
    });
    return total;
  };

  const handleCalculateTotal = () => {
    const totalMark = calculateTotalMark();
    // setTotalMark(totalMark); // Set the total mark in state
  };


  return (
    <div className="mx-auto max-w-4xl px-4 flex flex-col space-y-4">
      <div className="space-y-2 text-center">
        <h1 className="text-3xl font-bold">Examate</h1>
      </div>
      <div className="space-y-2">
        <div className="border-t border-b border-gray-200 dark:border-gray-800">
          <div className="container grid items-center gap-4 px-4 py-4 md:gap-6 md:px-6">
            {exam && <div className="flex items-center space-x-4">
              <div key={exam?.id} className="w-1/5 p-4">
                <div className="space-y-1">
                  <h2 className="text-xl font-semibold">{exam?.title}</h2>
                  <p className="text-sm font-normal text-gray-500 dark:text-gray-400">
                    Exam code: {exam?.code}
                  </p>
                </div>
              </div>
            </div>}
            <div className="space-y-2">
              <h1 className="text-3xl font-bold">Instructions</h1>

              <ul
                className="list-disc list-inside"
                style={{ listStyleType: 'disc' }}
              >
                <li>
                  Ensure a stable internet connection to avoid disruptions.
                </li>
                <li>
                  Close all unnecessary tabs, applications, and distractions on
                  your computer.
                </li>
                <li>
                  Ensure your device is fully charged or connected to a power
                  source.
                </li>
                <li>Begin the exam only when instructed to do so.</li>
                <li>
                  Do not refresh or navigate away from the exam page once it has
                  started.
                </li>
                <li>
                  Do not attempt to communicate with other students during the
                  exam.
                </li>
                <li>
                  Do not use any unauthorized aids or resources during the exam.
                </li>
              </ul>
            </div>
          </div>
        </div>
        <form className="space-y-4" onSubmit={onSubmit}>
          <div className="border border-gray-200 rounded-lg dark:border-gray-800">
            {questions?.map((question, index) => (
              <div
                key={question.id}
                className="p-4 border-b border-gray-200 last:border-0 dark:border-gray-800"
              >
                <div className="grid items-center gap-4 md:grid-cols-3">
                  <h3 className="text-base font-light ">
                    {index + 1}.{question.question}? ({question.marks}){' '}
                  </h3>
                  <div className="space-y-2 md:col-start-2 md:col-end-4">
                    <details>
                      <summary className="text-sm font-medium cursor-pointer">
                        Add your answer
                      </summary>
                      <div className="mt-2 space-y-2">
                        <Label
                          className="text-sm font-medium peer-disabled:cursor-not-allowed"
                          htmlFor="question-1"
                        >
                          Answer
                        </Label>
                        <Textarea
                          className="min-h-[100px] peer-disabled:pointer-events-none peer-disabled:bg-transparent peer-disabled:opacity-100"
                          id={question.id}
                          placeholder="Enter your answer"
                        />
                      </div>
                    </details>
                  </div>
                </div>
              </div>
            ))}
          </div>
          <div className="flex justify-center">
            <Button size="lg" variant="outline">
              Submit
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}

async function getQuestions(
  code: string,
): Promise<[QuestionTypeExam[], ExamType] | undefined> {
  const { data, error } = await supabase
    .from('exams')
    .select('id,code,title,date,questions(question,answer,teacher_id,id,marks)')
    .eq('code', code)
    .single();
  if (error) {
    toast.error(error.message);
    return;
  }
  const questions: any = data?.questions;
  if (Array.isArray(questions)) {
    return [questions as QuestionTypeExam[], { id: data?.id, title: data?.title, code: data?.code, date: data?.date }]
  }
}

async function submitAnswers(data: StudentExamLinkType) {
  const { status, error } = await supabase
    .from('student_exam_link')
    .upsert(data);
  if (error) toast.error(error.message);
  if (status !== 201) toast.error('Something went wrong');
  if (status === 201)
    toast.success('Answers submitted successfully');
}
async function getExams(): Promise<ExamType[]> {
  const { data, error } = await supabase.from('exams').select('*')
  if (error) {
    toast.error(error.message);
    return [];
  }
  return data;
}
