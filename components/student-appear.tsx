'use client'
import { supabase } from "@/utils/supabase"
import { UserType } from "@/utils/type"
import { User, UserResponse } from "@supabase/supabase-js"
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/HoedFNuTbhH
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { useSearchParams } from "next/navigation"
import { JSX, SVGProps, useCallback, useEffect, useMemo, useState } from "react"
import { toast } from "sonner"

export default function studentAppear() {
  const [user, setUser] = useState<UserType>()
  const params = useSearchParams()
  const code = params.get("code")
  const userRole = useMemo(() => user?.role, [user])
  const userId = useMemo(() => user?.id, [user])
  const [students, setStudents] = useState<{ name: string, examId: string }[]>()
  useEffect(() => {
    if (!user) getUserData().then(setUser)
  }, [])
  useEffect(() => {
    if (userId && userRole === 'teacher') {
      getStudents().then(setStudents)
    }
  }, [userId])
  const getUserData = useCallback(async (): Promise<UserType | undefined> => {
    const { data: { user }, error: detailError } = await supabase.auth.getUser() || {} as UserResponse
    if (detailError) {
      console.error(detailError)
      return
    }
    const { id: userId } = user ?? {} as User
    const { data: userData, error } = await supabase.from('users').select('*').eq('id', userId).single()
    if (error) {
      console.error(error)
      return
    }
    return userData
  }, [])
  const getStudents = useCallback(async () => {
    const { data, error } = await supabase.from('student_exam_link').select('id,student_id,exam_code,users(name)').eq('exam_code', code)
    if (error) {
      console.error(error)
      return
    }
    const datas = data as any
    return datas.map((item: any) => ({ name: item.users.name, examId: item.id }))
  }, [])
  return (
    <main key="1" className="container mx-auto py-6 px-2 md:px-4 lg:px-6">
      <h1 className="text-3xl font-bold mb-4 text-center">Students Appear</h1>
      <div className="grid gap-4">
        {students?.map((student, index) => (
          <div key={student.examId} className="bg-white rounded-lg shadow-md p-4 flex items-center justify-between">
            <div className="flex items-center gap-4">
              <span className="text-gray-500 font-medium">{index + 1}.</span>
              <div>
                <h2 className="text-lg font-medium">{student.name}</h2>
              </div>
            </div>
            <Link className="text-gray-500 hover:text-gray-900 transition-colors" href={`/calculationn?id=${student.examId}`}>
              <ChevronRightIcon className="h-6 w-6" />
              <span className="sr-only">Next Student</span>
            </Link>
          </div>
        ))}
      </div>
    </main>
  )
}

function ChevronRightIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m9 18 6-6-6-6" />
    </svg>
  )
}
